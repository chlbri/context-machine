{"version":3,"file":"context-machine.cjs.development.js","sources":["../src/createContextMachine.ts","../src/hooks.ts","../src/Provider.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { UseMachineOptions } from '@xstate/react/lib/types';\r\nimport { createContext } from 'react';\r\nimport {\r\n  EventObject,\r\n  interpret,\r\n  InterpreterOptions,\r\n  MachineOptions,\r\n  StateMachine,\r\n  Typestate,\r\n} from 'xstate';\r\n\r\nexport function createContextMachine<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  machine: StateMachine<TContext, any, TEvent, TTypestate>,\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TContext, TEvent>> &\r\n    Partial<MachineOptions<TContext, TEvent>>\r\n) {\r\n  return createContext(interpret(machine, options));\r\n}\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  useActor,\r\n  useInterpret,\r\n  useSelector as useSelectorR,\r\n} from '@xstate/react';\r\nimport { MaybeLazy, UseMachineOptions } from '@xstate/react/lib/types';\r\nimport { useContext as useContextR } from 'react';\r\nimport {\r\n  EventObject,\r\n  InterpreterOptions,\r\n  MachineOptions,\r\n  StateMachine,\r\n  Typestate,\r\n} from 'xstate';\r\nimport { ContextMachineType, MachineType, Selector } from './types';\r\n\r\nexport function usePrepare<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  machine: MaybeLazy<StateMachine<TContext, any, TEvent, TTypestate>>,\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TContext, TEvent>> &\r\n    Partial<MachineOptions<TContext, TEvent>>\r\n) {\r\n  return useInterpret(machine, options);\r\n}\r\n\r\nexport function useState<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['state'] {\r\n  const service = useContextR(Context);\r\n\r\n  const [state] = useActor(service);\r\n  return state;\r\n}\r\n\r\nexport function useSelector<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  },\r\n  R = any\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>,\r\n  selector: Selector<TContext, TEvent, TTypestate, R>\r\n): R {\r\n  const service = useContextR(Context);\r\n\r\n  const _out = useSelectorR(service, selector);\r\n  return _out;\r\n}\r\n\r\nexport function useSend<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['send'] {\r\n  const service = useContextR(Context);\r\n\r\n  return service.send;\r\n}\r\n\r\nexport function useCustomService<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['custom_service'] {\r\n  const {\r\n    getSnapshot,\r\n    id,\r\n    initialState,\r\n    off,\r\n    onChange,\r\n    onDone,\r\n    onEvent,\r\n    onSend,\r\n    onStop,\r\n    status,\r\n    stop,\r\n    subscribe,\r\n    sessionId,\r\n    toJSON,\r\n  } = useContextR(Context);\r\n\r\n  return {\r\n    getSnapshot,\r\n    id,\r\n    initialState,\r\n    off,\r\n    onChange,\r\n    onDone,\r\n    onEvent,\r\n    onSend,\r\n    onStop,\r\n    status,\r\n    stop,\r\n    subscribe,\r\n    sessionId,\r\n    toJSON,\r\n  };\r\n}\r\n\r\nexport function useContext<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate> {\r\n  const out = {\r\n    state: useState(Context),\r\n    send: useSend(Context),\r\n    custom_service: useCustomService(Context),\r\n  };\r\n\r\n  return out;\r\n}\r\n","import { UseMachineOptions } from '@xstate/react/lib/types';\r\nimport React, { PropsWithChildren, useContext } from 'react';\r\nimport {\r\n  EventObject,\r\n  InterpreterOptions,\r\n  MachineOptions,\r\n  Typestate,\r\n} from 'xstate';\r\nimport { usePrepare } from './hooks';\r\nimport { ContextMachineType } from './types';\r\n\r\ntype Props<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n> = {\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>;\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TContext, TEvent>> &\r\n    Partial<MachineOptions<TContext, TEvent>>;\r\n};\r\n\r\nexport function MachineProvider<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>({\r\n  Context,\r\n  children,\r\n  options,\r\n}: PropsWithChildren<Props<TContext, TEvent, TTypestate>>): JSX.Element {\r\n  const service = useContext(Context);\r\n  const value = usePrepare(service.machine, options);\r\n\r\n  return <Context.Provider {...{ value }}>{children}</Context.Provider>;\r\n}\r\n"],"names":["createContextMachine","machine","options","createContext","interpret","usePrepare","useInterpret","useState","Context","service","useContextR","useActor","state","useSelector","selector","_out","useSelectorR","useSend","send","useCustomService","getSnapshot","id","initialState","off","onChange","onDone","onEvent","onSend","onStop","status","stop","subscribe","sessionId","toJSON","useContext","out","custom_service","MachineProvider","children","value","React","Provider"],"mappings":";;;;;;;;;;;SAYgBA;AASdC,SACAC;AAIA,SAAOC,mBAAa,CAACC,gBAAS,CAACH,OAAD,EAAUC,OAAV,CAAV,CAApB;AACD;;AC3BD;AACA,SAgBgBG,WAQdJ,SACAC;AAIA,SAAOI,kBAAY,CAACL,OAAD,EAAUC,OAAV,CAAnB;AACD;AAED,SAAgBK,SAQdC;AAEA,MAAMC,OAAO,GAAGC,gBAAW,CAACF,OAAD,CAA3B;;AAEA,kBAAgBG,cAAQ,CAACF,OAAD,CAAxB;AAAA,MAAOG,KAAP;;AACA,SAAOA,KAAP;AACD;AAED,SAAgBC,YASdL,SACAM;AAEA,MAAML,OAAO,GAAGC,gBAAW,CAACF,OAAD,CAA3B;;AAEA,MAAMO,IAAI,GAAGC,iBAAY,CAACP,OAAD,EAAUK,QAAV,CAAzB;;AACA,SAAOC,IAAP;AACD;AAED,SAAgBE,QAQdT;AAEA,MAAMC,OAAO,GAAGC,gBAAW,CAACF,OAAD,CAA3B;AAEA,SAAOC,OAAO,CAACS,IAAf;AACD;AAED,SAAgBC,iBAQdX;AAEA,qBAeIE,gBAAW,CAACF,OAAD,CAff;AAAA,MACEY,WADF,gBACEA,WADF;AAAA,MAEEC,EAFF,gBAEEA,EAFF;AAAA,MAGEC,YAHF,gBAGEA,YAHF;AAAA,MAIEC,GAJF,gBAIEA,GAJF;AAAA,MAKEC,QALF,gBAKEA,QALF;AAAA,MAMEC,MANF,gBAMEA,MANF;AAAA,MAOEC,OAPF,gBAOEA,OAPF;AAAA,MAQEC,MARF,gBAQEA,MARF;AAAA,MASEC,MATF,gBASEA,MATF;AAAA,MAUEC,MAVF,gBAUEA,MAVF;AAAA,MAWEC,IAXF,gBAWEA,IAXF;AAAA,MAYEC,SAZF,gBAYEA,SAZF;AAAA,MAaEC,SAbF,gBAaEA,SAbF;AAAA,MAcEC,MAdF,gBAcEA,MAdF;;AAiBA,SAAO;AACLb,IAAAA,WAAW,EAAXA,WADK;AAELC,IAAAA,EAAE,EAAFA,EAFK;AAGLC,IAAAA,YAAY,EAAZA,YAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLC,IAAAA,QAAQ,EAARA,QALK;AAMLC,IAAAA,MAAM,EAANA,MANK;AAOLC,IAAAA,OAAO,EAAPA,OAPK;AAQLC,IAAAA,MAAM,EAANA,MARK;AASLC,IAAAA,MAAM,EAANA,MATK;AAULC,IAAAA,MAAM,EAANA,MAVK;AAWLC,IAAAA,IAAI,EAAJA,IAXK;AAYLC,IAAAA,SAAS,EAATA,SAZK;AAaLC,IAAAA,SAAS,EAATA,SAbK;AAcLC,IAAAA,MAAM,EAANA;AAdK,GAAP;AAgBD;AAED,SAAgBC,WAQd1B;AAEA,MAAM2B,GAAG,GAAG;AACVvB,IAAAA,KAAK,EAAEL,QAAQ,CAACC,OAAD,CADL;AAEVU,IAAAA,IAAI,EAAED,OAAO,CAACT,OAAD,CAFH;AAGV4B,IAAAA,cAAc,EAAEjB,gBAAgB,CAACX,OAAD;AAHtB,GAAZ;AAMA,SAAO2B,GAAP;AACD;;SCvHeE;MAQd7B,eAAAA;MACA8B,gBAAAA;MACApC,eAAAA;AAEA,MAAMO,OAAO,GAAGyB,gBAAU,CAAC1B,OAAD,CAA1B;AACA,MAAM+B,KAAK,GAAGlC,UAAU,CAACI,OAAO,CAACR,OAAT,EAAkBC,OAAlB,CAAxB;AAEA,SAAOsC,4BAAA,CAAChC,OAAO,CAACiC,QAAT,oBAAsB;AAAEF,IAAAA,KAAK,EAALA;AAAF,IAAtB,EAAkCD,QAAlC,CAAP;AACD;;;;;;;;;;;"}