{"version":3,"file":"context-machine.esm.js","sources":["../src/createContextMachine.ts","../src/hooks.ts","../src/Provider.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { UseMachineOptions } from '@xstate/react/lib/types';\nimport { createContext } from 'react';\nimport {\n  EventObject,\n  interpret,\n  InterpreterOptions,\n  MachineOptions,\n  StateMachine,\n  Typestate,\n} from 'xstate';\n\nexport function createContextMachine<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  machine: StateMachine<TContext, any, TEvent, TTypestate>,\n  options?: Partial<InterpreterOptions> &\n    Partial<UseMachineOptions<TContext, TEvent>> &\n    Partial<MachineOptions<TContext, TEvent>>\n) {\n  return createContext(interpret(machine, options));\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  useActor,\n  useInterpret,\n  useSelector as useSelectorR,\n} from '@xstate/react';\nimport { MaybeLazy, UseMachineOptions } from '@xstate/react/lib/types';\nimport { useContext as useContextR } from 'react';\nimport {\n  EventObject,\n  InterpreterOptions,\n  MachineOptions,\n  StateMachine,\n  Typestate,\n} from 'xstate';\nimport { ContextMachineType, MachineType, Selector } from './types';\n\nexport function usePrepare<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  machine: MaybeLazy<StateMachine<TContext, any, TEvent, TTypestate>>,\n  options?: Partial<InterpreterOptions> &\n    Partial<UseMachineOptions<TContext, TEvent>> &\n    Partial<MachineOptions<TContext, TEvent>>\n) {\n  return useInterpret(machine, options);\n}\n\nexport function useState<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\n): MachineType<TContext, TEvent, TTypestate>['state'] {\n  const service = useContextR(Context);\n\n  const [state] = useActor(service);\n  return state;\n}\n\nexport function useSelector<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  },\n  R = any\n>(\n  Context: ContextMachineType<TContext, TEvent, TTypestate>,\n  selector: Selector<TContext, TEvent, TTypestate, R>\n): R {\n  const service = useContextR(Context);\n\n  const _out = useSelectorR(service, selector);\n  return _out;\n}\n\nexport function useSend<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\n): MachineType<TContext, TEvent, TTypestate>['send'] {\n  const service = useContextR(Context);\n\n  return service.send;\n}\n\nexport function useCustomService<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\n): MachineType<TContext, TEvent, TTypestate>['custom_service'] {\n  const {\n    getSnapshot,\n    id,\n    initialState,\n    off,\n    onChange,\n    onDone,\n    onEvent,\n    onSend,\n    onStop,\n    status,\n    stop,\n    subscribe,\n    sessionId,\n    toJSON,\n  } = useContextR(Context);\n\n  return {\n    getSnapshot,\n    id,\n    initialState,\n    off,\n    onChange,\n    onDone,\n    onEvent,\n    onSend,\n    onStop,\n    status,\n    stop,\n    subscribe,\n    sessionId,\n    toJSON,\n  };\n}\n\nexport function useContext<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\n): MachineType<TContext, TEvent, TTypestate> {\n  const out = {\n    state: useState(Context),\n    send: useSend(Context),\n    custom_service: useCustomService(Context),\n  };\n\n  return out;\n}\n","import { UseMachineOptions } from '@xstate/react/lib/types';\nimport React, { PropsWithChildren, useContext } from 'react';\nimport {\n  EventObject,\n  InterpreterOptions,\n  MachineOptions,\n  Typestate,\n} from 'xstate';\nimport { usePrepare } from './hooks';\nimport { ContextMachineType } from './types';\n\ntype Props<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n> = {\n  Context: ContextMachineType<TContext, TEvent, TTypestate>;\n  options?: Partial<InterpreterOptions> &\n    Partial<UseMachineOptions<TContext, TEvent>> &\n    Partial<MachineOptions<TContext, TEvent>>;\n};\n\nexport function MachineProvider<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>({\n  Context,\n  children,\n  options,\n}: PropsWithChildren<Props<TContext, TEvent, TTypestate>>): JSX.Element {\n  const service = useContext(Context);\n  const value = usePrepare(service.machine, options);\n\n  return <Context.Provider {...{ value }}>{children}</Context.Provider>;\n}\n"],"names":["createContextMachine","machine","options","createContext","interpret","usePrepare","useInterpret","useState","Context","service","useContextR","useActor","state","useSelector","selector","_out","useSelectorR","useSend","send","useCustomService","getSnapshot","id","initialState","off","onChange","onDone","onEvent","onSend","onStop","status","stop","subscribe","sessionId","toJSON","useContext","out","custom_service","MachineProvider","children","value","React","Provider"],"mappings":";;;;SAYgBA;AASdC,SACAC;AAIA,SAAOC,aAAa,CAACC,SAAS,CAACH,OAAD,EAAUC,OAAV,CAAV,CAApB;AACD;;AC3BD;AACA,SAgBgBG,WAQdJ,SACAC;AAIA,SAAOI,YAAY,CAACL,OAAD,EAAUC,OAAV,CAAnB;AACD;AAED,SAAgBK,SAQdC;AAEA,MAAMC,OAAO,GAAGC,YAAW,CAACF,OAAD,CAA3B;;AAEA,kBAAgBG,QAAQ,CAACF,OAAD,CAAxB;AAAA,MAAOG,KAAP;;AACA,SAAOA,KAAP;AACD;AAED,SAAgBC,YASdL,SACAM;AAEA,MAAML,OAAO,GAAGC,YAAW,CAACF,OAAD,CAA3B;;AAEA,MAAMO,IAAI,GAAGC,aAAY,CAACP,OAAD,EAAUK,QAAV,CAAzB;;AACA,SAAOC,IAAP;AACD;AAED,SAAgBE,QAQdT;AAEA,MAAMC,OAAO,GAAGC,YAAW,CAACF,OAAD,CAA3B;AAEA,SAAOC,OAAO,CAACS,IAAf;AACD;AAED,SAAgBC,iBAQdX;AAEA,qBAeIE,YAAW,CAACF,OAAD,CAff;AAAA,MACEY,WADF,gBACEA,WADF;AAAA,MAEEC,EAFF,gBAEEA,EAFF;AAAA,MAGEC,YAHF,gBAGEA,YAHF;AAAA,MAIEC,GAJF,gBAIEA,GAJF;AAAA,MAKEC,QALF,gBAKEA,QALF;AAAA,MAMEC,MANF,gBAMEA,MANF;AAAA,MAOEC,OAPF,gBAOEA,OAPF;AAAA,MAQEC,MARF,gBAQEA,MARF;AAAA,MASEC,MATF,gBASEA,MATF;AAAA,MAUEC,MAVF,gBAUEA,MAVF;AAAA,MAWEC,IAXF,gBAWEA,IAXF;AAAA,MAYEC,SAZF,gBAYEA,SAZF;AAAA,MAaEC,SAbF,gBAaEA,SAbF;AAAA,MAcEC,MAdF,gBAcEA,MAdF;;AAiBA,SAAO;AACLb,IAAAA,WAAW,EAAXA,WADK;AAELC,IAAAA,EAAE,EAAFA,EAFK;AAGLC,IAAAA,YAAY,EAAZA,YAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLC,IAAAA,QAAQ,EAARA,QALK;AAMLC,IAAAA,MAAM,EAANA,MANK;AAOLC,IAAAA,OAAO,EAAPA,OAPK;AAQLC,IAAAA,MAAM,EAANA,MARK;AASLC,IAAAA,MAAM,EAANA,MATK;AAULC,IAAAA,MAAM,EAANA,MAVK;AAWLC,IAAAA,IAAI,EAAJA,IAXK;AAYLC,IAAAA,SAAS,EAATA,SAZK;AAaLC,IAAAA,SAAS,EAATA,SAbK;AAcLC,IAAAA,MAAM,EAANA;AAdK,GAAP;AAgBD;AAED,SAAgBC,WAQd1B;AAEA,MAAM2B,GAAG,GAAG;AACVvB,IAAAA,KAAK,EAAEL,QAAQ,CAACC,OAAD,CADL;AAEVU,IAAAA,IAAI,EAAED,OAAO,CAACT,OAAD,CAFH;AAGV4B,IAAAA,cAAc,EAAEjB,gBAAgB,CAACX,OAAD;AAHtB,GAAZ;AAMA,SAAO2B,GAAP;AACD;;SCvHeE;MAQd7B,eAAAA;MACA8B,gBAAAA;MACApC,eAAAA;AAEA,MAAMO,OAAO,GAAGyB,YAAU,CAAC1B,OAAD,CAA1B;AACA,MAAM+B,KAAK,GAAGlC,UAAU,CAACI,OAAO,CAACR,OAAT,EAAkBC,OAAlB,CAAxB;AAEA,SAAOsC,mBAAA,CAAChC,OAAO,CAACiC,QAAT,oBAAsB;AAAEF,IAAAA,KAAK,EAALA;AAAF,IAAtB,EAAkCD,QAAlC,CAAP;AACD;;;;"}