{"version":3,"file":"context-machine.cjs.production.min.js","sources":["../src/hooks.ts","../src/Provider.tsx","../src/createContextMachine.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  useActor,\r\n  useInterpret,\r\n  useSelector as useSelectorR,\r\n} from '@xstate/react';\r\nimport { MaybeLazy, UseMachineOptions } from '@xstate/react/lib/types';\r\nimport { useContext as useContextR } from 'react';\r\nimport {\r\n  EventObject,\r\n  InterpreterOptions,\r\n  MachineOptions,\r\n  StateMachine,\r\n  Typestate,\r\n} from 'xstate';\r\nimport { ContextMachineType, MachineType, Selector } from './types';\r\n\r\nexport function usePrepare<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  machine: MaybeLazy<StateMachine<TContext, any, TEvent, TTypestate>>,\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TContext, TEvent>> &\r\n    Partial<MachineOptions<TContext, TEvent>>\r\n) {\r\n  return useInterpret(machine, options);\r\n}\r\n\r\nexport function useState<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['state'] {\r\n  const service = useContextR(Context);\r\n\r\n  const [state] = useActor(service);\r\n  return state;\r\n}\r\n\r\nexport function useSelector<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  },\r\n  R = any\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>,\r\n  selector: Selector<TContext, TEvent, TTypestate, R>\r\n): R {\r\n  const service = useContextR(Context);\r\n\r\n  const _out = useSelectorR(service, selector);\r\n  return _out;\r\n}\r\n\r\nexport function useSend<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['send'] {\r\n  const service = useContextR(Context);\r\n\r\n  return service.send;\r\n}\r\n\r\nexport function useCustomService<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate>['custom_service'] {\r\n  const {\r\n    getSnapshot,\r\n    id,\r\n    initialState,\r\n    off,\r\n    onChange,\r\n    onDone,\r\n    onEvent,\r\n    onSend,\r\n    onStop,\r\n    status,\r\n    stop,\r\n    subscribe,\r\n    sessionId,\r\n    toJSON,\r\n  } = useContextR(Context);\r\n\r\n  return {\r\n    getSnapshot,\r\n    id,\r\n    initialState,\r\n    off,\r\n    onChange,\r\n    onDone,\r\n    onEvent,\r\n    onSend,\r\n    onStop,\r\n    status,\r\n    stop,\r\n    subscribe,\r\n    sessionId,\r\n    toJSON,\r\n  };\r\n}\r\n\r\nexport function useContext<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>(\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>\r\n): MachineType<TContext, TEvent, TTypestate> {\r\n  const out = {\r\n    state: useState(Context),\r\n    send: useSend(Context),\r\n    custom_service: useCustomService(Context),\r\n  };\r\n\r\n  return out;\r\n}\r\n","import { UseMachineOptions } from '@xstate/react/lib/types';\r\nimport React, { PropsWithChildren, useContext } from 'react';\r\nimport {\r\n  EventObject,\r\n  InterpreterOptions,\r\n  MachineOptions,\r\n  Typestate,\r\n} from 'xstate';\r\nimport { usePrepare } from './hooks';\r\nimport { ContextMachineType } from './types';\r\n\r\ntype Props<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n> = {\r\n  Context: ContextMachineType<TContext, TEvent, TTypestate>;\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TContext, TEvent>> &\r\n    Partial<MachineOptions<TContext, TEvent>>;\r\n};\r\n\r\nexport function MachineProvider<\r\n  TContext,\r\n  TEvent extends EventObject,\r\n  TTypestate extends Typestate<TContext> = {\r\n    value: any;\r\n    context: TContext;\r\n  }\r\n>({\r\n  Context,\r\n  children,\r\n  options,\r\n}: PropsWithChildren<Props<TContext, TEvent, TTypestate>>): JSX.Element {\r\n  const service = useContext(Context);\r\n  const value = usePrepare(service.machine, options);\r\n\r\n  return <Context.Provider {...{ value }}>{children}</Context.Provider>;\r\n}\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { UseMachineOptions } from '@xstate/react/lib/types';\r\nimport { createContext } from 'react';\r\nimport {\r\n  createMachine,\r\n  EventObject,\r\n  interpret,\r\n  InterpreterOptions,\r\n  MachineConfig,\r\n  MachineOptions, Typestate\r\n} from 'xstate';\r\nimport { Model } from 'xstate/lib/model.types';\r\n\r\nexport function createContextMachine<\r\n  TC,\r\n  TE extends EventObject,\r\n  TT extends Typestate<TC> = {\r\n    value: any;\r\n    context: TC;\r\n  }\r\n>(\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  config: TC extends Model<any, any, any> ? never : MachineConfig<TC, any, TE>,\r\n  options?: Partial<InterpreterOptions> &\r\n    Partial<UseMachineOptions<TC, TE>> &\r\n    Partial<MachineOptions<TC, TE>>\r\n) {\r\n  const machine = createMachine<TC, TE, TT>(config, options);\r\n  const service = interpret(machine);\r\n  return createContext(service);\r\n}\r\n"],"names":["usePrepare","machine","options","useInterpret","useState","Context","service","useContextR","useActor","useSend","send","useCustomService","getSnapshot","id","initialState","off","onChange","onDone","onEvent","onSend","onStop","status","stop","subscribe","sessionId","toJSON","children","value","useContext","React","Provider","config","createMachine","interpret","createContext","state","custom_service","selector","useSelectorR"],"mappings":"4MAiBgBA,EAQdC,EACAC,UAIOC,eAAaF,EAASC,YAGfE,EAQdC,OAEMC,EAAUC,aAAYF,UAEZG,WAASF,eAsBXG,EAQdJ,UAEgBE,aAAYF,GAEbK,cAGDC,EAQdN,SAiBIE,aAAYF,SAET,CACLO,cAjBAA,YAkBAC,KAjBAA,GAkBAC,eAjBAA,aAkBAC,MAjBAA,IAkBAC,WAjBAA,SAkBAC,SAjBAA,OAkBAC,UAjBAA,QAkBAC,SAjBAA,OAkBAC,SAjBAA,OAkBAC,SAjBAA,OAkBAC,OAjBAA,KAkBAC,YAjBAA,UAkBAC,YAjBAA,UAkBAC,SAjBAA,gDCzEFpB,IAAAA,QACAqB,IAAAA,SACAxB,IAAAA,QAGMyB,EAAQ3B,EADE4B,aAAWvB,GACMJ,QAASC,UAEnC2B,gBAACxB,EAAQyB,0BAAa,CAAEH,MAAAA,IAAUD,0CClBzCK,EACA7B,OAIMD,EAAU+B,gBAA0BD,EAAQ7B,GAC5CI,EAAU2B,YAAUhC,UACnBiC,gBAAc5B,gCF0GrBD,SAEY,CACV8B,MAAO/B,EAASC,GAChBK,KAAMD,EAAQJ,GACd+B,eAAgBzB,EAAiBN,kFAlFnCA,EACAgC,OAEM/B,EAAUC,aAAYF,UAEfiC,cAAahC,EAAS+B"}